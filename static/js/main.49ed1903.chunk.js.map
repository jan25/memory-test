{"version":3,"sources":["assets/checker-board.png","assets/pop.wav","assets/success.mp3","assets/flip.wav","assets/fail.wav","components/BlackWhiteCard.js","components/NumberCard.js","components/Info.js","components/Utils.js","components/Sounds.js","components/App.js","index.js"],"names":["module","exports","BlackWhiteCard","props","src","blackwhite","height","width","alt","NumberCard","this","active","failed","className","num","done","turned","onClick","onNumClick","Component","Info","state","showModal","showInfo","showReset","renderInfo","renderResetBtn","onReset","openModal","Modal","centered","show","onHide","closeModal","Header","closeButton","Title","Body","setState","calculateRandomPlaces","numCells","numNums","cells","_","range","shuffled","shuffle","selected","slice","cellToNum","forEach","cell","sound","asset","volume","s","UIfx","setVolume","sounds","pop","popAsset","flip","flipAsset","success","successAsset","fail","failedAsset","playSound","kind","play","App","gameAreaRef","React","createRef","gameAreaHeight","gameAreaWidth","activeCellToNum","nextNum","doneNums","onNextNumClick","bind","autoResetInterval","gameAreaNode","current","getBoundingClientRect","rows","parseInt","cols","reset","showResetBtn","Fragment","ref","id","renderNumberCards","map","n","key","isActive","cardIsDone","includes","concat","setInterval","RESET_INTERVAL","clearInterval","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.49ed1903.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/checker-board.3be8bfbf.png\";","module.exports = __webpack_public_path__ + \"static/media/pop.bf2f8cd7.wav\";","module.exports = __webpack_public_path__ + \"static/media/success.5acc4c35.mp3\";","module.exports = __webpack_public_path__ + \"static/media/flip.2dd4d944.wav\";","module.exports = __webpack_public_path__ + \"static/media/fail.5eb27ce9.wav\";","import React from \"react\";\nimport blackwhite from \"../assets/checker-board.png\";\n\nconst BlackWhiteCard = props => {\n  return (\n    <img\n      src={blackwhite}\n      height={props.width}\n      width={props.width}\n      alt=\"blackwhite card\"\n    />\n  );\n};\n\nexport default BlackWhiteCard;\n","import React, { Component } from \"react\";\nimport BlackWhiteCard from \"./BlackWhiteCard\";\nimport \"./NumberCard.css\";\n\nclass NumberCard extends Component {\n  render() {\n    if (!this.props.active) {\n      return <div className=\"number-card inactive\"></div>;\n    }\n\n    if (this.props.failed) {\n      return (\n        <div className=\"number-card failed blinking-error\">\n          <span>{this.props.num}</span>\n        </div>\n      );\n    }\n\n    if (this.props.done) {\n      return <div className=\"number-card done\"></div>;\n    }\n\n    if (this.props.turned) {\n      return (\n        <div className=\"number-card active\" onClick={() => this.onClick()}>\n          <BlackWhiteCard width={100} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={\n          this.props.num === 1\n            ? \"number-card active blinking-one\"\n            : \"number-card active\"\n        }\n      >\n        <span onClick={() => this.onClick()}>{this.props.num}</span>\n      </div>\n    );\n  }\n\n  onClick() {\n    this.props.onNumClick(this.props.num);\n  }\n}\n\nexport default NumberCard;\n","import React, { Component } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport \"./Info.css\";\n\nclass Info extends Component {\n  state = {\n    showModal: false\n  };\n\n  render() {\n    const { showInfo, showReset } = this.props;\n    if (showInfo) {\n      return this.renderInfo();\n    } else if (showReset) {\n      return this.renderResetBtn();\n    }\n  }\n\n  renderResetBtn() {\n    return (\n      <div>\n        <i className=\"material-icons\" onClick={this.props.onReset}>\n          refresh\n        </i>\n      </div>\n    );\n  }\n\n  renderInfo() {\n    return (\n      <div>\n        <i className=\"material-icons md-light\" onClick={() => this.openModal()}>\n          info\n        </i>\n        <Modal\n          centered={true}\n          show={this.state.showModal}\n          onHide={() => this.closeModal()}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              <div className=\"custom-header\">\n                <i className=\"material-icons md-36\">info</i>\n                <span>Info</span>\n              </div>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            This game is a memory test for your brain on how well it can store\n            information for short term recollection.\n            <Modal.Title>Instructions</Modal.Title>\n            <ol>\n              <li>Remember the layout of numbers given to you</li>\n              <li>\n                Click on number <i>1</i> to hide the numbers under cards\n              </li>\n              <li>\n                Now click on cards in order of numbers as you've seen them\n                before\n              </li>\n              <li>Continue (3) until all numbers are collected</li>\n            </ol>\n          </Modal.Body>\n        </Modal>\n      </div>\n    );\n  }\n\n  openModal() {\n    this.setState({\n      showModal: true\n    });\n  }\n\n  closeModal() {\n    this.setState({\n      showModal: false\n    });\n  }\n}\n\nexport default Info;\n","import _ from \"lodash\";\n\nconst NUMBER_CARD_MARGIN = 5;\nconst NUMBER_CARD_WIDTH = 100 + 2 * NUMBER_CARD_MARGIN;\nconst NUMBER_CARD_HEIGHT = NUMBER_CARD_WIDTH;\n\nexport const calculateRowsColumns = (width, height) => {\n  let rows = parseInt(width / NUMBER_CARD_WIDTH);\n  let cols = parseInt(height / NUMBER_CARD_HEIGHT);\n  return {\n    rows,\n    cols\n  };\n};\n\nexport const calculateRandomPlaces = (numCells, numNums) => {\n  let cells = _.range(0, numCells);\n  let shuffled = _.shuffle(cells);\n  let selected = _.slice(shuffled, 0, numNums);\n\n  let cellToNum = {};\n  let num = 1;\n  _.forEach(selected, cell => {\n    cellToNum[cell] = num++;\n  });\n\n  return cellToNum;\n};\n","import UIfx from \"uifx\";\nimport popAsset from \"../assets/pop.wav\";\nimport successAsset from \"../assets/success.mp3\";\nimport flipAsset from \"../assets/flip.wav\";\nimport failedAsset from \"../assets/fail.wav\";\n\nconst sound = (asset, volume) => {\n  const s = new UIfx(asset);\n  s.setVolume(volume || 0.5);\n  return s;\n};\n\nconst sounds = {\n  pop: sound(popAsset),\n  flip: sound(flipAsset, 1.0),\n  success: sound(successAsset),\n  fail: sound(failedAsset)\n};\n\nexport const playSound = kind => {\n  switch (kind) {\n    case \"pop\":\n      sounds.pop.play();\n      break;\n    case \"flip\":\n      sounds.flip.play();\n      break;\n    case \"success\":\n      sounds.success.play();\n      break;\n    case \"fail\":\n      sounds.fail.play();\n      break;\n    default:\n    // do nothing\n  }\n};\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport NumberCard from \"./NumberCard\";\nimport Info from \"./Info\";\nimport { calculateRandomPlaces, calculateRowsColumns } from \"./Utils\";\nimport { playSound } from \"./Sounds\";\nimport \"./App.css\";\n\nconst ACTIVE_NUMBERS = 9; // numbers start from 1\nconst RESET_INTERVAL = 6000; // 6s\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.gameAreaRef = React.createRef();\n    this.gameAreaHeight = 0;\n    this.gameAreaWidth = 0;\n\n    this.state = {\n      activeCellToNum: {},\n      nextNum: 1,\n      doneNums: [],\n      turned: false,\n      failed: false\n    };\n    this.onNextNumClick = this.onNextNumClick.bind(this);\n    this.onReset = this.onReset.bind(this);\n    this.autoResetInterval = null;\n  }\n\n  componentDidMount() {\n    const gameAreaNode = this.gameAreaRef.current.getBoundingClientRect();\n    this.gameAreaHeight = gameAreaNode.height;\n    this.gameAreaWidth = gameAreaNode.width;\n    const { rows, cols } = calculateRowsColumns(\n      this.gameAreaWidth,\n      this.gameAreaHeight\n    );\n    this.cells = rows * cols;\n\n    this.reset();\n  }\n\n  render() {\n    const showResetBtn = this.state.turned || this.state.failed;\n\n    return (\n      <React.Fragment>\n        <div ref={this.gameAreaRef} id=\"game-area\">\n          {this.renderNumberCards()}\n        </div>\n        <div id=\"game-info\">\n          <Info\n            showInfo={!showResetBtn}\n            showReset={showResetBtn}\n            onReset={this.onReset}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  renderNumberCards() {\n    const cellNums = _.range(0, this.cells);\n\n    return cellNums.map(n => (\n      <NumberCard\n        key={n}\n        active={this.isActive(n)}\n        num={this.cellToNum(n)}\n        turned={this.state.turned}\n        done={this.cardIsDone(n)}\n        failed={this.state.failed}\n        onNumClick={this.onNextNumClick}\n      />\n    ));\n  }\n\n  isActive(cell) {\n    return cell in this.state.activeCellToNum;\n  }\n\n  cellToNum(cell) {\n    return this.isActive(cell) ? this.state.activeCellToNum[cell] : null;\n  }\n\n  cardIsDone(cell) {\n    return this.state.doneNums.includes(this.cellToNum(cell));\n  }\n\n  onNextNumClick(num) {\n    if (!this.state.turned && num !== 1) {\n      return;\n    }\n\n    if (num === 1) {\n      this.setState({\n        nextNum: 2,\n        turned: true,\n        doneNums: _.concat(this.state.doneNums, [1])\n      });\n      playSound(\"pop\");\n    } else if (num === this.state.nextNum) {\n      this.setState({\n        nextNum: this.state.nextNum + 1,\n        doneNums: _.concat(this.state.doneNums, [num])\n      });\n      if (num === ACTIVE_NUMBERS) {\n        this.autoResetInterval = setInterval(this.onReset, RESET_INTERVAL / 2);\n        playSound(\"success\");\n      } else {\n        playSound(\"pop\");\n      }\n    } else if (num !== this.state.nextNum) {\n      this.setState({\n        failed: true\n      });\n      this.autoResetInterval = setInterval(this.onReset, RESET_INTERVAL);\n      playSound(\"fail\");\n    }\n  }\n\n  onReset() {\n    clearInterval(this.autoResetInterval);\n    this.reset();\n    playSound(\"flip\");\n  }\n\n  reset() {\n    this.setState({\n      activeCellToNum: calculateRandomPlaces(this.cells, ACTIVE_NUMBERS),\n      nextNum: 1,\n      doneNums: [],\n      turned: false,\n      failed: false\n    });\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}